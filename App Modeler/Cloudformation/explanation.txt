# AWS CloudFormation テンプレート詳細解説

## 概要
このCloudFormationテンプレートは「AWS基盤ウェブサイト公開システム - スケーラブルでセキュアなEコマースウェブサイト」を構築するためのものです。複数の環境（開発、ステージング、本番）で使用可能な、高可用性を持つEコマースウェブサイトのインフラを自動的に構築します。

## テンプレートの構成
このテンプレートは以下の主要なセクションから構成されています：

1. **テンプレートバージョンと説明**
2. **パラメータ** - 環境設定やリソース設定をカスタマイズするためのパラメータ
3. **マッピング** - リージョンごとのAMI IDマッピング
4. **リソース** - 実際に作成されるAWSリソースの定義
5. **出力** - スタック作成後に参照可能な値の定義

## 詳細解説

### 1. パラメータ（Parameters）セクション
このセクションでは、スタック作成時にカスタマイズ可能なパラメータを定義しています。

- **EnvironmentName**: 環境名（dev, staging, prod）を指定します。デフォルトは「dev」です。
- **VPC関連パラメータ**: VPCとサブネットのCIDRブロックを指定します。
  - VPCのCIDRは10.0.0.0/16がデフォルト
  - パブリックサブネット2つ（10.0.1.0/24, 10.0.2.0/24）
  - プライベートサブネット2つ（10.0.3.0/24, 10.0.4.0/24）
- **EC2InstanceType**: WebサーバーのEC2インスタンスタイプ（デフォルトはt3.micro）
- **DBInstanceClass**: Aurora DBのインスタンスクラス（デフォルトはdb.t4g.medium）
- **データベース関連パラメータ**:
  - DBName: データベース名（デフォルトはecommercedb）
  - DBUsername: DB管理者ユーザー名（デフォルトはdbadmin）
  - DBPassword: DBパスワード（8文字以上必要）
- **AdminEmail**: アラート通知用のメールアドレス

### 2. マッピング（Mappings）セクション
各AWSリージョンに対応するAMI ID（Amazon Machine Image）を定義しています。これにより、スタックをどのリージョンにデプロイしても適切なAMI IDが自動的に選択されます。

以下のリージョンに対応するAMI IDが定義されています：
- us-east-1, us-east-2, us-west-1, us-west-2
- ap-northeast-1 (東京), ap-southeast-1 (シンガポール)
- eu-west-1, eu-central-1

### 3. リソース（Resources）セクション
このセクションでは、実際に作成されるAWSリソースを定義しています。

#### 3.1. VPCとネットワーク設定
- **VPC**: プライベートネットワーク空間を作成します。DNSサポートとホスト名を有効化しています。
- **InternetGateway**: VPCからインターネットへの接続を提供します。
- **InternetGatewayAttachment**: インターネットゲートウェイをVPCにアタッチします。
- **サブネット**:
  - パブリックサブネット2つ（異なるアベイラビリティゾーンに配置）
  - プライベートサブネット2つ（異なるアベイラビリティゾーンに配置）
- **ルートテーブル**:
  - パブリックサブネット用のルートテーブル（インターネットゲートウェイへのルートを含む）
  - プライベートサブネット用のルートテーブル（NATゲートウェイへのルートを含む）
- **NAT Gateway**: プライベートサブネット内のリソースがインターネットにアクセスするために使用します。冗長性のため2つ作成されています。

#### 3.2. セキュリティグループ
- **WebServerSecurityGroup**: Webサーバー用のセキュリティグループ
  - 許可されるトラフィック: HTTP (80), HTTPS (443), SSH (22)
  - 注意: 本番環境では、SSH (22)へのアクセスは制限すべきです（現在は0.0.0.0/0で全て許可）
- **DatabaseSecurityGroup**: Aurora DB用のセキュリティグループ
  - PostgreSQL (5432)ポートへのアクセスをWebサーバーからのみ許可
- **CacheSecurityGroup**: ElastiCache用のセキュリティグループ
  - Redis (6379)ポートへのアクセスをWebサーバーからのみ許可

#### 3.3. S3バケット（ログ保存用）
- **LogBucket**: CloudFrontやその他のサービスのログを保存するためのS3バケット
  - バケット名は環境名とアカウントIDを組み合わせて作成
  - バージョニングが有効化されており、ログは365日後に自動削除される設定
- **LogBucketPolicy**: CloudFrontからのログ書き込みを許可するポリシー

#### 3.4. EC2インスタンス（Auto Scaling）
- **WebServerLaunchTemplate**: EC2インスタンスの起動設定
  - ユーザーデータスクリプトを使用して、Apache, PHP, PostgreSQLクライアントをインストール
- **WebServerAutoScalingGroup**: EC2インスタンスのAuto Scalingグループ
  - 最小2台、最大6台、目標2台で構成
  - プライベートサブネットに配置
- **ScalingPolicy**: CPU使用率が70%を超えると自動でスケールアウトする設定

#### 3.5. ロードバランサー
- **ApplicationLoadBalancer**: ALB（Application Load Balancer）
  - パブリックサブネットに配置
- **WebServerTargetGroup**: Webサーバーを登録するターゲットグループ
  - ヘルスチェックは30秒間隔、パスは「/」
- **ALBListener**: ポート80でリクエストを受け付け、WebServerTargetGroupに転送

#### 3.6. API Gateway
- **EcommerceApi**: RESTful API
  - REGIONAL（リージョナル）エンドポイントタイプ
- **ApiGatewayCloudWatchRole**: API Gatewayがログをログを記録するために使用するIAMロール
- **ProductsResource**: 「/products」リソースパス
- **ProductsGetMethod**: GETメソッド（サンプル商品データを返すモックインテグレーション）
- **RootGetMethod**: ルートパスのGETメソッド（APIの基本情報を返す）
- **ApiDeployment & ApiStage**: APIのデプロイメントとステージ設定

#### 3.7. Aurora PostgreSQL
- **DBSubnetGroup**: Auroraを配置するサブネットグループ（プライベートサブネット内）
- **AuroraDBCluster**: PostgreSQLクラスター
  - エンジンバージョン: 13.9
  - バックアップ保持期間: 7日
  - ストレージ暗号化: 有効
- **AuroraDBInstance1**: DBインスタンス（db.t4g.medium）

#### 3.8. ElastiCache (Redis)
- **ElastiCacheSubnetGroup**: Redisを配置するサブネットグループ
- **ElastiCacheCluster**: Redisクラスター（cache.t3.small、1ノード）

#### 3.9. CloudFront
- **CloudFrontDistribution**: CDN配信設定
  - オリジン: Application Load Balancer
  - ビューワープロトコルポリシー: HTTPSへのリダイレクト
  - キャッシュ設定: デフォルトTTL 3600秒（1時間）
  - ログ記録: 有効（LogBucketに保存）
  - TLS証明書: CloudFrontのデフォルト証明書

#### 3.10. GuardDuty
- **GuardDutyDetector**: セキュリティ脅威検出サービス
  - 検出結果の公開頻度: 15分ごと

#### 3.11. CloudWatch & SNS
- **AlarmTopic**: アラート通知用のSNSトピック
- **CPUAlarm**: EC2インスタンスのCPU使用率が80%を超えた場合のアラーム
- **DatabaseConnections**: データベース接続数が80を超えた場合のアラーム

### 4. 出力（Outputs）セクション
スタック作成後に参照可能な値が定義されています。他のスタックからこれらの値を参照することも可能です。

主な出力値:
- VPC ID
- パブリック/プライベートサブネットのリスト
- セキュリティグループID
- ロードバランサーのDNS名
- CloudFrontのURL
- AuroraとElastiCacheのエンドポイント
- API GatewayのURL
- ログバケット名

## アーキテクチャの特徴

1. **高可用性設計**:
   - 複数のアベイラビリティゾーン（AZ）にリソースを分散
   - Auto Scalingによる自動スケーリング
   - ロードバランサーによる負荷分散

2. **セキュリティ対策**:
   - プライベートサブネットへのアプリケーション配置
   - セキュリティグループによるアクセス制限
   - GuardDutyによる脅威検出
   - データベースストレージの暗号化

3. **パフォーマンス最適化**:
   - ElastiCacheによるキャッシュ層
   - CloudFrontによるCDN配信
   - Auto Scalingによる負荷対応

4. **モニタリングとアラート**:
   - CloudWatchアラームの設定
   - SNSトピックによる通知

5. **冗長構成**:
   - 複数AZにわたるデータベース配置
   - 複数のNATゲートウェイ

## 注意点と改善ポイント

1. **セキュリティ**:
   - Webサーバーセキュリティグループで、SSH（22）へのアクセスが全IPから許可されている点は本番環境では制限すべき
   - データベースパスワードのデフォルト値が設定されている（実際の運用ではパラメータ指定が必要）

2. **コスト最適化**:
   - NATゲートウェイが2つあるため、コストがかかる（dev環境では1つで十分かもしれない）
   - GuardDutyが常時有効化されているため、コストが発生する

3. **拡張性**:
   - 現状、単一のRDSインスタンスしか定義されていない（リードレプリカを追加することで読み取りスケーラビリティを向上可能）
   - ElastiCacheも単一ノードのため、冗長性がない

4. **カスタマイズポイント**:
   - Auto Scaling設定（最小/最大/目標インスタンス数）をパラメータ化することで、環境ごとに柔軟な設定が可能
   - ElastiCacheのノード数やインスタンスタイプもパラメータ化することで柔軟性が向上

## デプロイ方法

このテンプレートは以下の方法でデプロイできます：

1. **AWS Management Console**:
   - CloudFormationコンソールにアクセス
   - 「スタックの作成」→「新しいリソースを使用」を選択
   - テンプレートファイルをアップロード
   - パラメータを設定し、スタックを作成

2. **AWS CLI**:
   ```
   aws cloudformation create-stack \
     --stack-name ecommerce-infrastructure \
     --template-body file://cloudformation-template.txt \
     --parameters ParameterKey=EnvironmentName,ParameterValue=dev
   ```

3. **AWS CDK**:
   - CDKプロジェクトでこのテンプレートをインポートし、必要に応じてカスタマイズ

## まとめ

このCloudFormationテンプレートは、スケーラブルで高可用性を持つEコマースウェブサイトインフラを構築するための包括的な定義です。複数環境（開発、ステージング、本番）に対応し、セキュリティやパフォーマンスを考慮した設計になっています。

AWSのベストプラクティスに則った構成になっていますが、実際の運用では特にセキュリティ面とコスト最適化の観点から見直しが必要な箇所があります。また、ビジネス要件に応じて、Auto Scaling設定やデータベース構成などをカスタマイズするとよいでしょう。
