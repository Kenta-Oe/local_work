## AWS基盤ウェブサイト公開システム - 実装ガイドラインとベストプラクティス

CloudFormationテンプレートを作成する際の重要なポイントと、今回直面した問題を回避するためのベストプラクティスをまとめました。

### 1. CloudFormation構造と形式に関する注意点

- **YAML構造の一貫性を保つ**: 重複キーや不適切なインデントを避け、常に整合性のある構造を維持する
- **マッピングセクションの配置**: マッピングセクションは通常、DescriptionとParametersの間に配置する
- **リソースの依存関係**: DependsOnを使用して明示的に依存関係を定義することでデプロイエラーを防止する

### 2. ASCII文字のみ使用する（日本語禁止）

- **説明フィールド**: GroupDescription等では必ずASCII文字のみを使用する（「Webサーバー用」ではなく「Web Server」など）
- **パラメータ説明**: 日本語でも動作する場合がありますが、一貫性のためにすべて英語で記述することを推奨

### 3. リージョン特有の設定

- **AMI ID**: リージョンごとに異なるAMI IDを使用する必要がある
  ```yaml
  Mappings:
    RegionMap:
      ap-northeast-1:
        AMI: ami-0ed99df77a82560e6
  ```
- **RDSインスタンスタイプとバージョン**: 特定のエンジンバージョンとインスタンスタイプの組み合わせはリージョンによって制限がある
  - Aurora PostgreSQLでは、例えば東京リージョンではdb.t4g.mediumとPostgreSQL 13.9の組み合わせを使用

### 4. API Gatewayの設定

- **メソッドの定義**: API Gatewayをデプロイする前に、少なくとも1つのメソッド（GET /など）を定義する
- **ログ設定**: ログを有効にする場合は、IAMロールを事前に設定し、依存関係を明示する
- **シンプルな初期設定**: テスト環境ではログやカスタム設定を最小限に抑える

### 5. S3バケットとCloudFrontの連携

- **ACL設定**: CloudFrontログ用のS3バケットではACLを有効にする
  ```yaml
  OwnershipControls:
    Rules:
      - ObjectOwnership: BucketOwnerPreferred
  PublicAccessBlockConfiguration:
    BlockPublicAcls: false
  ```
- **テスト環境ではログを無効化**: トラブルシューティングを簡素化するため、テスト環境では必要に応じてログを無効化

### 6. データベース設定

- **パスワード要件**: Aurora PostgreSQLのパスワードは8文字以上必要
  ```yaml
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Default: Password123!  # 本番環境では使用しない
  ```
- **インスタンスクラスの選択**: リージョンとエンジンバージョンに合わせて適切なインスタンスクラスを選択

### 7. リソース削除の考慮事項

- **S3バケットの削除**: 内容が空でないとバケットは削除できないため、事前に内容を削除する処理が必要
- **依存関係**: リソース間の依存関係を考慮した削除順序を計画する
- **スタック更新アプローチ**: 空のテンプレートでスタックを更新することで、既存リソースを削除することが可能

### 8. 初めから設定しておくべき重要なパラメータ

- **デフォルト値**: パラメータには適切なデフォルト値を設定しておく
- **制約**: 最小長さやパターンなどの制約を設定して無効な値を防ぐ
- **NoEcho**: パスワードなどの機密情報には必ずNoEcho: trueを設定

### 9. テスト環境と本番環境の分離

- **環境パラメータ**: 環境名をパラメータ化して、異なる環境で同じテンプレートを再利用できるようにする
- **条件付きリソース**: Conditionsを使用して環境ごとに必要なリソースのみをデプロイする

### 10. エラー調査の方法

- **CloudWatch Logs**: Lambda関数やAPI Gatewayのログを確認する
- **イベント履歴**: CloudFormationコンソールのイベント履歴でエラーの詳細を確認する
- **個別リソースのテスト**: 問題があるリソースだけを含む小さなテンプレートでテストする

これらのガイドラインに従うことで、AWSリソースのデプロイと管理がよりスムーズになり、一般的なエラーを回避できます。